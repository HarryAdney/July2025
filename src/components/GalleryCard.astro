---
import { Image, getImage } from 'astro:assets';
import type { GalleryItem } from '../types/gallery.js';

interface Props {
  item: GalleryItem;
  size?: "small" | "medium" | "large";
  loading?: 'lazy' | 'eager';
  class?: string;
}

const {
  item,
  size = "medium",
  loading = 'lazy',
  class: className = ''
} = Astro.props;

const sizeClasses = {
  small: "gallery-card--small",
  medium: "gallery-card--medium",
  large: "gallery-card--large",
};

const imageDimensions = {
  small: { width: 300, height: 300 },
  medium: { width: 400, height: 300 },
  large: { width: 600, height: 400 }
};

const dimensions = imageDimensions[size];
// Images are in public/gallery, so we reference them directly
const imagePath = `/gallery/${item.images.thumbnail.src}`;

// For public images, we don't use getImage optimization, just direct paths
const optimizedImage = null;
---

<article class={`gallery-card ${sizeClasses[size]} ${className}`} data-item-id={item.id}>
  <a href={`./gallery/${item.slug}`} class="gallery-card__link">
    <div class="gallery-card__image-container">
      {optimizedImage ? (
        <img
          src={optimizedImage.src}
          alt={item.images.thumbnail.alt}
          class="gallery-card__image"
          loading={loading}
          width={optimizedImage.attributes.width}
          height={optimizedImage.attributes.height}
        />
      ) : (
        <img
          src={imagePath}
          alt={item.images.thumbnail.alt}
          class="gallery-card__image"
          loading={loading}
          width={dimensions.width}
          height={dimensions.height}
        />
      )}

      <!-- <div class="gallery-card__overlay">
        <div class="gallery-card__tags">
          {item.tags.slice(0, 2).map(tag => (
            <span class="gallery-card__tag">{tag}</span>
          ))}
        </div>
      </div> -->
    </div>
  </a>
</article>

<style>
  .gallery-card {
    display: block;
    width: 100%;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    background: rgba(255, 255, 255, 0.05);
  }

  .gallery-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .gallery-card__link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .gallery-card__image-container {
    position: relative;
    overflow: hidden;
  }

  .gallery-card--small .gallery-card__image-container {
    aspect-ratio: 1;
  }

  .gallery-card--medium .gallery-card__image-container {
    aspect-ratio: 4/3;
  }

  .gallery-card--large .gallery-card__image-container {
    aspect-ratio: 3/2;
  }

  .gallery-card__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .gallery-card:hover .gallery-card__image {
    transform: scale(1.05);
  }

  .gallery-card__overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0.1), transparent, rgba(0,0,0,0.7));
    opacity: 0;
    transition: opacity 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 1rem;
  }

  .gallery-card:hover .gallery-card__overlay {
    opacity: 1;
  }

  .gallery-card__tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .gallery-card__tag {
    background: rgba(212, 175, 55, 0.9);
    color: #000;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }

</style>